            #-----------------------------------------------------------#
            # BashPad specific code is modified to work with zsh        #
            # In order to run it, copy this file as .zshrc to *any* dir #
            # other than $HOME, I prefer ~/.config, and then launch your#
            # terminal as                                               #
            # ZDOTDIR=~/.config <terminal command goes here>            #
            #                                     - ppurka              #
            # It differs from original BashPad in the following ways    #
            # 1. There is no RUNDIALOG used. Instead we use the inherent#
            #    capability to zsh to source .zshrc from the directory  #
            #    specified by ZDOTDIR                                   #
            # 2. inputrc files are not needed. bindkeys do the needful  #
            # 3. I don't know how to use MENUCOMPLETE in zsh :-(        #
            # 4. We don't need the HISTFILE swapping                    #
            #-----------------------------------------------------------#
            
            #-------------------- Bugs/Todo ----------------------------#
            # 1. RUNWATCH=1 doesn't seem to do anything. This is because#
            #    on backgrounding the process by "&!" the exit status is#
            #    always 0.                                              #
            # 2. ^C does not quit                                       #
            # 3. Any other bugs/features inherent in the original .runc #
            #    :-)
            #-----------------------------------------------------------#
 
# Source the user's original .zshrc file. Comment this line and add your
# own zsh commands if you don't want to source the original ~/.zshrc file
. ~/.zshrc


# BashPad v0.5
# copyright 2009 Â© Ole Christian Tvedt <olechrt@stud.ntnu.no>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Changes in v0.5
#  - Use size hints when autoresizing the window.
#
# Changes in v0.4
#  - Duplicates are no longer saved in the history.
#  - Added optional window settings on startup through wmctrl:
#      * Resize.
#      * Properties (sticky, skip_pager, skip_taskbar and above).
#      * Modality (not supported by all WMs).
#  - Fixed for people using the noclobber bash option.
#
# Changes in v0.3
#  - Use Alt+Enter to invert default runwatch choice.
#
# Changes in v0.2:
#  - Runwatch uses a temporary file now instead of a subshell,
#    making its memory footprint smaller.
#
# Known bugs/features:
#  - When stringing commands with "&&", "||" or ";", only
#    the first command is run with runwatch.

##################### Settings start #####################

# Set this to non-zero if you want to see the output of
# applications that exit with a non-zero return code.
# This requires that you have either x11-apps/xmessage or
# gnome-extra/zenity installed.
# Use Alt+Enter when launching applications to invert
# the default.
: ${RUNWATCH:=1}

# Set this to non-zero if you want tab to cycle through
# possible completions with tab, instead of the regular
# listing of possible completions. This is handy if your
# run box is only one line. This will also enable
# horizontal scroll mode.
: ${MENUCOMPLETE:=1}

# The foreground and background colour of the prompt.
# Run this in a console for a list of colours:
#  echo -e "FG\tBG" && for A in $(seq 0 87); do tput bold && tput setf $A && tput setb $((87-$A)) && echo -ne "$A\t$((87-$A))" && tput sgr0 && echo; done
# Comment them out to use the terminal defaults.
FG=2
#BG=0

# Set the prompt character(s). The current directory will
# be displayed before PCHAR if it is anything but the
# users home directory.
PCHAR=":"

# Set this to non-zero to set the window geometry
# to something reasonable automatically. You need
# wmctrl installed for this to work.
AUTOWINSIZE=1

# Set this to non-zero to automatically set the window
# properties sticky, skip_pager, skip_taskbar and above.
# You need wmctrl installed for this to work.
AUTOPROPS=1

# Set this to non-zero to automatically make the
# window modal. Modality means it will steal all input
# until it is closed (prevent other windows from receiving
# focus). This is ignored by some window managers, such as
# compiz.
# You need wmctrl installed for this to work.
AUTOMODAL=1

# You should only need to set this if wmctrl modifies the
# wrong window by default. Keep it commented otherwise.
#WMCTRLSELECTOR="-x -r bashpad"

# Comment this line if you want to preserve your RPROMPT from ~/.zshrc
unset RPROMPT

###################### Settings end ######################

# Don't do anything if this is not a run dialog.
# This is not required since we will use ZDOTDIR instead. So the usual
# zshrc will not be read
#if [[ "${RUNDIALOG:-0}" -eq 0 ]]; then
#  return
#fi
#unset RUNDIALOG
# Set a default WMCTRLSELECTOR
WMCTRLSELECTOR="${WMCTRLSELECTOR:-"-r :ACTIVE:"}"

# Run the enabled wmctrl commands.
if which wmctrl &> /dev/null && wmctrl -d >& /dev/null; then

  # Set the window geometry.
  if [[ ${AUTOWINSIZE:-0} -ne 0 ]]; then
    # Try to get window hints.
    if which xprop &> /dev/null; then
      WINHINTS=( $(xprop -id "$(xprop -f WINDOW 32x -root _NET_ACTIVE_WINDOW | sed -ne 's/^.* = //p')" -f WM_SIZE_HINTS 32c WM_NORMAL_HINTS | sed -ne 's/^.* =\( [0-9]\+,\)\{9\} \([0-9]\+\), \([0-9]\+\),\( [0-9]\+,\)\{4\} \([0-9]\+\), \([0-9]\+\).*$/\2 \3 \5 \6/p') )
    else
      WINHINTS=(15 26 4 4) # Wild stab in the dark.
    fi

    # Fetch size of workspace.
    SCREENSIZE=( $(wmctrl -d | sed -ne '/^[0-9]\+ *\*/ s/^.*WA: [^ ]\+ \([0-9]\+\)x\([0-9]\+\) .*/\1\n\2/p') )

    # Calculate new window size.
    WIDTH=$(( (((2 * ${SCREENSIZE[1]}) / (3 * ${WINHINTS[1]})) * ${WINHINTS[1]}) + ${WINHINTS[3]} ))
    LEFT=$(( (${SCREENSIZE[1]} - $WIDTH) / 2 ))
    if [[ ${MENUCOMPLETE:-0} -ne 0 ]]; then
      HEIGHT=$(( ${WINHINTS[2]} + ${WINHINTS[4]} ))
      TOP=$((  ${SCREENSIZE[2]} / 2 ))
    else
      HEIGHT=$(( ((${SCREENSIZE[2]} / (3 * ${WINHINTS[2]})) * ${WINHINTS[2]}) + ${WINHINTS[4]} ))
      TOP=$HEIGHT
    fi
    wmctrl $WMCTRLSELECTOR -e 0,$LEFT,$TOP,$WIDTH,$HEIGHT
  fi

  # Set the window properties.
  if [[ ${AUTOPROPS:-0} -ne 0 ]]; then
    wmctrl $WMCTRLSELECTOR -b add,sticky,above
    wmctrl $WMCTRLSELECTOR -b add,skip_pager,skip_taskbar
  fi

  # Set the window modality.
  if [[ ${AUTOMODAL:-0} -ne 0 ]]; then
    wmctrl $WMCTRLSELECTOR -b add,modal
  fi

fi

# Use this file for history storage
export HISTFILE=$ZDOTDIR/.run_history

# Define the runwatch function
function runwatch {
  OUTLOG="$(mktemp)"
  "$@" >> "$OUTLOG" 2>&1
  CODE=$?

  # Detect output application.
  if which zenity &> /dev/null; then
    CMD='zenity --text-info --title RunWatch'
  elif which xmessage &> /dev/null; then
    CMD='xargs --null xmessage'
  else
    CMD=''
  fi

  # Display the output on error.
  if [[ -n "$CMD" ]]; then
    if [[ $CODE -ne 0 ]]; then
      {
      echo -n "The command \"$@\" failed ($CODE)"

      if [[ -s "$OUTLOG" ]]; then
        echo -e " with the following output:\n\n"
        cat "$OUTLOG"
      else
        echo -n "."
      fi
      } | $CMD
    fi
  fi

  # Clean up and exit.
  rm "$OUTLOG"

  exit $CODE
}

# History related settings
# append command to history immediately after pressing enter
setopt inc_append_history
# Remove duplicate history entries
# Set this option if you want to keep dupes until you exceed HISTSIZE
# setopt hist_expire_dups_first
# Set this option if you want to delete all dupes in history file
setopt hist_ignore_all_dups
# Strip runwatch and trailing & from last line of history
sed -i -e 's: \&\! ; exit$::;s:^runwatch ::' $HISTFILE

# Set up keyboard shortcuts
bindkey     "^A"            beginning-of-line
bindkey     "^E"            end-of-line
bindkey     "^K"            kill-line
bindkey -s  "^D"            "^A^Kexit\n"
bindkey -s  "^C"            "^A^Kexit\n"    # doesn't work
bindkey     "\t"            menu-complete   # complete immediately
# Add behaviour of hitting RETURN.
if [[ $RUNWATCH -eq 0 ]]; then
    bindkey -s "^M"         "^E &! ; exit\n"
    bindkey -s "\e^M"       "^Arunwatch ^E &! ; exit\n"
else
    bindkey -s "^M"         "^Arunwatch ^E &! ; exit\n"
    bindkey -s "\e^M"       "^E &! ; exit\n"
fi

# Set up TAB completion mode.
# Don't know yet how to turn off menu in zsh completely
# For now, turn off verbose menus in zsh
zstyle ':completion:*' menu select
zstyle ':completion:*' verbose no

# Set the prompt. Prefix directory name if not in home directory.
[[ -n "$FG" ]]      && PS1="%{$(tput setf $FG)%}"
[[ -n "$BG" ]]      && PS1="${PS1}%{$(tput setb $BG)%}"
[[ "$PWD" != ~ ]]   && PS1="$PS1%~"
PS1="${PS1}${PCHAR}%{$reset_color%} "

# History file swapping is not required now.
